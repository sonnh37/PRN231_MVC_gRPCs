// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Net1711_231_ASM3_SE172092_NGUYENHOANGSON.Data.Models;

public partial class FA24_SE1717_PRN231_G3_KOIORDERINGSYSTEMINJAPANContext : DbContext
{
    public FA24_SE1717_PRN231_G3_KOIORDERINGSYSTEMINJAPANContext()
    {
    }

    public FA24_SE1717_PRN231_G3_KOIORDERINGSYSTEMINJAPANContext(DbContextOptions<FA24_SE1717_PRN231_G3_KOIORDERINGSYSTEMINJAPANContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BookingRequest> BookingRequests { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Delivery> Deliveries { get; set; }

    public virtual DbSet<DeliveryDetail> DeliveryDetails { get; set; }

    public virtual DbSet<Farm> Farms { get; set; }

    public virtual DbSet<FarmCategory> FarmCategories { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<KoiFish> KoiFishes { get; set; }

    public virtual DbSet<KoiOrder> KoiOrders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<ServiceOrder> ServiceOrders { get; set; }

    public virtual DbSet<Size> Sizes { get; set; }

    public virtual DbSet<Travel> Travels { get; set; }

    public virtual DbSet<TravelFarm> TravelFarms { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BookingRequest>(entity =>
        {
            entity.ToTable("BookingRequest");

            entity.HasIndex(e => e.CustomerId, "IX_BookingRequest_CustomerId");

            entity.HasIndex(e => e.TravelId, "IX_BookingRequest_TravelId");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Customer).WithMany(p => p.BookingRequests).HasForeignKey(d => d.CustomerId);

            entity.HasOne(d => d.Travel).WithMany(p => p.BookingRequests).HasForeignKey(d => d.TravelId);
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.ToTable("Category");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<Delivery>(entity =>
        {
            entity.ToTable("Delivery");

            entity.HasIndex(e => e.DeliveryStaffId, "IX_Delivery_DeliveryStaffId");

            entity.HasIndex(e => e.KoiOrderId, "IX_Delivery_KoiOrderId")
                .IsUnique()
                .HasFilter("([KoiOrderId] IS NOT NULL)");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.DeliveryStaff).WithMany(p => p.Deliveries).HasForeignKey(d => d.DeliveryStaffId);

            entity.HasOne(d => d.KoiOrder).WithOne(p => p.Delivery).HasForeignKey<Delivery>(d => d.KoiOrderId);
        });

        modelBuilder.Entity<DeliveryDetail>(entity =>
        {
            entity.ToTable("DeliveryDetail");

            entity.HasIndex(e => e.DeliveryId, "IX_DeliveryDetail_DeliveryId");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Delivery).WithMany(p => p.DeliveryDetails).HasForeignKey(d => d.DeliveryId);
        });

        modelBuilder.Entity<Farm>(entity =>
        {
            entity.ToTable("Farm");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<FarmCategory>(entity =>
        {
            entity.HasKey(e => new { e.FarmId, e.CategoryId });

            entity.ToTable("FarmCategory");

            entity.HasIndex(e => e.CategoryId, "IX_FarmCategory_CategoryId");

            entity.HasOne(d => d.Category).WithMany(p => p.FarmCategories)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Farm).WithMany(p => p.FarmCategories)
                .HasForeignKey(d => d.FarmId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.ToTable("Invoice");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<KoiFish>(entity =>
        {
            entity.ToTable("KoiFish");

            entity.HasIndex(e => e.CategoryId, "IX_KoiFish_CategoryId");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Category).WithMany(p => p.KoiFishes).HasForeignKey(d => d.CategoryId);
        });

        modelBuilder.Entity<KoiOrder>(entity =>
        {
            entity.ToTable("KoiOrder");

            entity.HasIndex(e => e.CustomerId, "IX_KoiOrder_CustomerId");

            entity.HasIndex(e => e.InvoiceId, "IX_KoiOrder_InvoiceId")
                .IsUnique()
                .HasFilter("([InvoiceId] IS NOT NULL)");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Customer).WithMany(p => p.KoiOrders).HasForeignKey(d => d.CustomerId);

            entity.HasOne(d => d.Invoice).WithOne(p => p.KoiOrder).HasForeignKey<KoiOrder>(d => d.InvoiceId);
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.ToTable("OrderDetail");

            entity.HasIndex(e => e.KoiFishId, "IX_OrderDetail_KoiFishId");

            entity.HasIndex(e => e.KoiOrderId, "IX_OrderDetail_KoiOrderId");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.KoiFish).WithMany(p => p.OrderDetails).HasForeignKey(d => d.KoiFishId);

            entity.HasOne(d => d.KoiOrder).WithMany(p => p.OrderDetails).HasForeignKey(d => d.KoiOrderId);
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasIndex(e => e.BookingRequestId, "IX_Sales_BookingRequestId")
                .IsUnique()
                .HasFilter("([BookingRequestId] IS NOT NULL)");

            entity.HasIndex(e => e.SaleStaffId, "IX_Sales_SaleStaffId");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.BookingRequest).WithOne(p => p.Sale).HasForeignKey<Sale>(d => d.BookingRequestId);

            entity.HasOne(d => d.SaleStaff).WithMany(p => p.Sales).HasForeignKey(d => d.SaleStaffId);
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.ToTable("Service");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");

            entity.HasMany(d => d.BookingRequests).WithMany(p => p.Services)
                .UsingEntity<Dictionary<string, object>>(
                    "ServiceXbookingRequest",
                    r => r.HasOne<BookingRequest>().WithMany()
                        .HasForeignKey("BookingRequestId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    l => l.HasOne<Service>().WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    j =>
                    {
                        j.HasKey("ServiceId", "BookingRequestId");
                        j.ToTable("ServiceXBookingRequest");
                        j.HasIndex(new[] { "BookingRequestId" }, "IX_ServiceXBookingRequest_BookingRequestId");
                    });
        });

        modelBuilder.Entity<ServiceOrder>(entity =>
        {
            entity.ToTable("ServiceOrder");

            entity.HasIndex(e => e.BookingRequestId, "IX_ServiceOrder_BookingRequestId");

            entity.HasIndex(e => e.InvoiceId, "IX_ServiceOrder_InvoiceId")
                .IsUnique()
                .HasFilter("([InvoiceId] IS NOT NULL)");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.BookingRequest).WithMany(p => p.ServiceOrders).HasForeignKey(d => d.BookingRequestId);

            entity.HasOne(d => d.Invoice).WithOne(p => p.ServiceOrder).HasForeignKey<ServiceOrder>(d => d.InvoiceId);
        });

        modelBuilder.Entity<Size>(entity =>
        {
            entity.ToTable("Size");

            entity.HasIndex(e => e.KoiFishId, "IX_Size_KoiFishId")
                .IsUnique()
                .HasFilter("([KoiFishId] IS NOT NULL)");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.SizeInCm).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SizeInGram).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.KoiFish).WithOne(p => p.Size).HasForeignKey<Size>(d => d.KoiFishId);
        });

        modelBuilder.Entity<Travel>(entity =>
        {
            entity.ToTable("Travel");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<TravelFarm>(entity =>
        {
            entity.HasKey(e => new { e.TravelId, e.FarmId });

            entity.ToTable("TravelFarm");

            entity.HasIndex(e => e.FarmId, "IX_TravelFarm_FarmId");

            entity.HasOne(d => d.Farm).WithMany(p => p.TravelFarms)
                .HasForeignKey(d => d.FarmId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Travel).WithMany(p => p.TravelFarms)
                .HasForeignKey(d => d.TravelId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}